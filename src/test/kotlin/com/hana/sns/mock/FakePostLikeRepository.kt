package com.hana.sns.mock

import com.hana.sns.post.domain.Post
import com.hana.sns.post.domain.PostLike
import com.hana.sns.post.service.port.PostLikeRepository
import com.hana.sns.user.domain.User
import java.util.concurrent.atomic.AtomicLong

class FakePostLikeRepository : PostLikeRepository {
    private val autoGeneratedId: AtomicLong = AtomicLong(0)
    var data = mutableListOf<PostLike>()


    override fun findByUserAndPost(user: User, post: Post): PostLike? {
        return data.find { it.user == user && it.post == post }
    }

    override fun save(postLike: PostLike): PostLike {
        if(postLike.id == 0L || postLike.id == null) {
            postLike.id = autoGeneratedId.incrementAndGet()
            data.add(postLike)
        } else {
            data.removeIf { it.id == postLike.id }
            postLike.id = autoGeneratedId.incrementAndGet()
            data.add(postLike)
        }
        return postLike
    }

    fun findById(id : Long): PostLike? {
        return data.find { it.id == id }
    }

    override fun countByPost(post: Post): Long {
        return data.filter { it.post == post }.size.toLong()
    }

    override fun deleteAllByPost(post: Post) {
        data.removeIf { it.post == post }
    }

    fun findAll(): List<PostLike> {
        return data
    }

}
