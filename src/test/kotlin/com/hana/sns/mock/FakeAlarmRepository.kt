package com.hana.sns.mock

import com.hana.sns.post.domain.Comment
import com.hana.sns.user.domain.Alarm
import com.hana.sns.user.domain.User
import com.hana.sns.user.service.port.AlarmRepository
import org.springframework.data.domain.Page
import org.springframework.data.domain.PageImpl
import org.springframework.data.domain.Pageable
import java.util.concurrent.atomic.AtomicLong

class FakeAlarmRepository : AlarmRepository {

    private val autoGeneratedId: AtomicLong = AtomicLong(0)
    var data = mutableListOf<Alarm>()
    override fun findAllByUserId(userId: Long, pageable: Pageable): Page<Alarm> {
        val pageSize = pageable.pageSize
        val offset = pageable.offset.toInt()
        val startIdx = offset.coerceAtMost(data.size - 1)
        val lastIdx = (offset + pageSize).coerceAtMost(data.size)
        val sublist = data.filter { it.user.id == userId }.subList(startIdx, lastIdx)
        return PageImpl(sublist, pageable, data.size.toLong())
    }
//    override fun findAllByUser(user: User, pageable: Pageable): Page<Alarm> {
//        val pageSize = pageable.pageSize
//        val offset = pageable.offset.toInt()
//
//        val startIdx = offset.coerceAtMost(data.size - 1)
//        val lastIdx = (offset + pageSize).coerceAtMost(data.size)
//
//        val sublist = data.filter { it.user == user }.subList(startIdx, lastIdx)
//        return PageImpl(sublist, pageable, data.size.toLong())
//
//    }

    override fun save(alarm: Alarm): Alarm {
        /*\
                if(post.id == 0L || post.id == null) {
            post.id = autoGeneratedId.incrementAndGet()
            data.add(post)
        } else {
            data.removeIf { it.id == post.id }
            post.id = autoGeneratedId.incrementAndGet()
            data.add(post)
        }
        return post
         */
        if(alarm.id == 0L || alarm.id == null) {
            alarm.id = autoGeneratedId.incrementAndGet()
            data.add(alarm)
        } else {
            data.removeIf { it.id == alarm.id }
            alarm.id = autoGeneratedId.incrementAndGet()
            data.add(alarm)
        }
        return alarm
    }

    fun findAll(): List<Alarm> {
        return data
    }

}
